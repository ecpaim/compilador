loadI 2048 => rfp 
loadI 2048 => rsp 
loadI 30 => rbss 
jumpI => Lmain
Lf: 
i2i rsp => rfp 
addI rsp, 16 => rsp 
addI rsp, 4 => rsp 
loadI 2 => r1 
storeAI r1 => rfp, 12 
jumpI => L0 
L0: 
loadAI rfp, 0 => r2 
loadAI rfp, 4 => r3 
loadAI rfp, 8 => r4 
i2i r3 => rsp 
i2i r4 => rfp 
jump => r2 
Lmain: 
i2i rsp => rfp 
addI rsp, 0 => rsp 
addI rsp, 4 => rsp 
loadI 6 => r6 
loadI 2 => r7 
div r6, r7 => r8 
storeAI r8 => rfp, 0 
loadAI rfp, 0 => r9 
storeAI r9 => rfp, 12 
halt
inst: loadI 2048 rfp (null) 
inst: loadI 2048 rsp (null) 
inst: loadI 30 rbss (null) 
inst: jumpI Lmain (null) (null) 
inst: Lf: (null) (null) (null) 
inst: i2i rsp rfp (null) 
inst: addI rsp 16 rsp 
inst: addI rsp 4 rsp 
inst: loadI 2 r1 (null) 
inst: storeAI r1 rfp 12 
inst: jumpI L0 (null) (null) 
inst: L0: (null) (null) (null) 
inst: loadAI rfp 0 r2 
inst: loadAI rfp 4 r3 
inst: loadAI rfp 8 r4 
inst: i2i r3 rsp (null) 
inst: i2i r4 rfp (null) 
inst: jump r2 (null) (null) 
inst: Lmain: (null) (null) (null) 
inst: i2i rsp rfp (null) 
inst: addI rsp 0 rsp 
inst: addI rsp 4 rsp 
inst: loadI 6 r6 (null) 
inst: loadI 2 r7 (null) 
inst: div r6 r7 r8 
inst: storeAI r8 rfp 0 
inst: loadAI rfp 0 r9 
inst: storeAI r9 rfp 12 
inst: halt (null) (null) (null) 
NUMBER ARGS: 0 
	.globl	f 
	.type	f, @function 
f:
.Lf: 
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-16, %rsp
	movl	$2, %ecx 
	movl	%ecx, %eax
	jmp	.L0 
.L0: 
	leave
	ret
	.size	f, .-f
	.globl	main 
	.type	main, @function 
main:
.Lmain: 
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-16, %rsp
	movl	$6, %ebx 
	movl	$2, %r8d 
	movl	%ebx, %eax
	cltd
	movq	$0, %rdx
	idivl	%r8d
	movl	%eax,-0(%rbp)
	movl	-0(%rbp), %r9d
	movl	%r9d, %eax
	movq	%rbp, %rsp
	popq	%rbp
	ret
	.size	main, .-main
	.section	.note.GNU-stack,"",@progbits 
	.text 
	.globl	f 
	.type	f, @function 
f:
.Lf: 
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-16, %rsp
	movl	$2, %ecx 
	movl	%ecx, %eax
	jmp	.L0 
.L0: 
	leave
	ret
	.size	f, .-f
	.globl	main 
	.type	main, @function 
main:
.Lmain: 
	pushq	%rbp
	movq	%rsp, %rbp
	addq	$-16, %rsp
	movl	$6, %ebx 
	movl	$2, %r8d 
	movl	%ebx, %eax
	cltd
	movq	$0, %rdx
	idivl	%r8d
	movl	%eax,-0(%rbp)
	movl	-0(%rbp), %r9d
	movl	%r9d, %eax
	movq	%rbp, %rsp
	popq	%rbp
	ret
	.size	main, .-main
	.section	.note.GNU-stack,"",@progbits 
